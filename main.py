import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ChatPermissions, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from dotenv import load_dotenv

load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_USERNAME = "@lugansk112"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

SPAM_KEYWORDS = ['–∫–∞–Ω–∞–ª 18+', '–ø–∏—à–∏ –≤ –ª—Å', '–ø–∏—à–∏ –≤ –ª–∏—á–∫—É', '–≤—Å—Ç—Ä–µ—á—É—Å—å', '—Ö—É–π', '—á–ª–µ–Ω', '—Å–µ–∫—Å', '—Å–æ—Å–∫–∞', '–ª—é–±–ª—é –º—É–∂—á–∏–Ω']

@dp.message_handler(content_types=types.ContentType.NEW_CHAT_MEMBERS)
async def new_member_handler(message: types.Message):
    for user in message.new_chat_members:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="checksub")
        )
        await bot.restrict_chat_member(message.chat.id, user.id, ChatPermissions(can_send_messages=False))
        await bot.send_message(
            message.chat.id,
            "üëã –ü—Ä–∏–≤–µ—Ç, —á—Ç–æ–±—ã –ø–∏—Å–∞—Ç—å –≤ —ç—Ç–æ–º —á–∞—Ç–µ ‚Äî –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {}\n"
            "–ò –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá".format(CHANNEL_USERNAME),
            reply_markup=keyboard
        )
        logging.info("üëÄ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –¥–æ–±–∞–≤–ª–µ–Ω –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.".format(user.id))

@dp.callback_query_handler(lambda c: c.data == "checksub")
async def process_subscription(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    chat_id = callback_query.message.chat.id
    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        if member.status in ['creator', 'administrator', 'member']:
            await bot.restrict_chat_member(chat_id, user_id, ChatPermissions(
                can_send_messages=True,
                can_send_media_messages=True,
                can_send_other_messages=True,
                can_add_web_page_previews=True))
            await callback_query.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å.")
        else:
            await callback_query.answer("‚ùå –¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)
    except:
        await callback_query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)

@dp.message_handler(lambda message: message.text and any(word in message.text.lower() for word in SPAM_KEYWORDS))
async def spam_filter(message: types.Message):
    await message.delete()
    await message.answer("üö´ –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª.")
    logging.info("‚ùå –£–¥–∞–ª–µ–Ω —Å–ø–∞–º –æ—Ç {}: {}".format(message.from_user.id, message.text))

@dp.message_handler(commands=["log"])
async def get_log(message: types.Message):
    await message.reply("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —á–∞—Ç.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
